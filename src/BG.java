
import java.awt.Graphics2D;
import java.awt.Image;

public class BG {

    Image img;
    Image img2;
    public static BG instance;
    public boolean startFlashing;

    public BG() {
        instance = this;
        img = ImageImporter.getOneImage("arena.png");
        generateTiles();
    }

    public void paint(Graphics2D g) {
        if (!startFlashing) {
            g.drawImage(img, 0, 24, null);
        } else {
            if (System.currentTimeMillis() % 400 > 200) {
                g.drawImage(img2, 0, 24, null);
            } else {
                g.drawImage(img, 0, 24, null);
            }
        }

        for (int x = 0; x < xSize; x++) {
            for (int y = 0; y < ySize; y++) {
                tiles[x][y].paint(g);
            }
        }
    }

    void generateTiles() {
        tiles = new Tile[xSize][ySize];
        for (int x = 0; x < xSize; x++) {
            for (int y = 0; y < ySize; y++) {
                if (tileTypes[y][x] == 0) {
                    if (y > 2 && y < 34) {
                        tiles[x][y] = new Tile(x, y, tileTypes[y][x], this);
                    } else {
                        tiles[x][y] = new Tile(x, y);
                    }

                } else {
                    tiles[x][y] = new Tile(x, y, tileTypes[y][x], this);
                }
            }
        }
        for (int x = 0; x < xSize; x++) {
            for (int y = 0; y < ySize; y++) {
                if (tiles[x][y].tileType != 5 && tiles[x][y].tileType != 0) {
                    tiles[x][y].FindFriendTiles();
                }
            }
        }
    }

    void refillTiles() {
        for (int x = 0; x < xSize; x++) {
            for (int y = 0; y < ySize; y++) {
                tiles[x][y].tileType = tileTypes[y][x];
            }
        }
    }

    public int xSize = 28;
    public int ySize = 36;

    public Tile[][] tiles;

    public Tile leftTunnelTile0 = new Tile(-1, 17, 5, BG.instance);
    public Tile rightTunnelTile0 = new Tile(28, 17, 5, BG.instance);
    public Tile leftTunnelTile1 = new Tile(-2, 17, 5, BG.instance);
    public Tile rightTunnelTile1 = new Tile(29, 17, 5, BG.instance);

    // 0  = seinä
    // 1  = tie
    // 2  = nurkka
    // 3  = risteys
    // 4  = erityisristeys (haamut eivät voi kääntyä ylös)
    // 5  = tunneli (ei ruokaa)
    // 6  = tie (ei ruokaa)
    // 7  = nurkka (ei ruokaa)
    // 8  = risteys (ei ruokaa)
    // 9  = erityisristeys (ei ruokaa)
    // 10 = tie (energizer)
    // 11 = nurkka (energizer)
    public byte tileTypes[][] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 2, 1, 1, 1, 1, 3, 0, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 6, 6, 9, 6, 6, 9, 6, 6, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {5, 5, 5, 5, 5, 5, 3, 6, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 6, 3, 5, 5, 5, 5, 5, 5},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 2, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 2, 0, 0, 2, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 2, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
        {0, 11, 1, 2, 0, 0, 3, 1, 1, 3, 1, 1, 4, 6, 6, 4, 1, 1, 3, 1, 1, 3, 0, 0, 2, 1, 11, 0},
        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0},
        {0, 2, 1, 3, 1, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 3, 1, 2, 0},
        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    };
}
